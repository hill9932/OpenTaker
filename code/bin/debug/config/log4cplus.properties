#log4cplus.rootLogger=[LogLevel], appenderName, appenderName, ...
#log4cplus.logger.logger_name=[LogLevel|INHERITED], appenderName, appenderName, ...

log4cplus.rootLogger=INFO, STDOUT
log4cplus.logger.OpenTaker=DEBUG, R
log4cplus.logger.lib=INFO

#log4cplus.appender.appenderName=fully.qualified.name.of.appender.class
log4cplus.appender.STDOUT=log4cplus::ConsoleAppender
log4cplus.appender.STDOUT.layout=log4cplus::PatternLayout
log4cplus.appender.STDOUT.layout.ConversionPattern=%D{%Y-%m-%d %H:%M:%S} %-6t [%p]%m%n

#log4cplus.appender.appenderName.Filter.FilterNumber=fully.qualified.name.of.Filter.class
#log4cplus.appender.appenderName.Filter.FilterNumber.FilterCondition=value.of.FilterCondition

log4cplus.appender.R=log4cplus::RollingFileAppender
log4cplus.appender.R.File=./log/OpenTaker.log
log4cplus.appender.R.MaxFileSize=5MB
log4cplus.appender.R.MaxBackupIndex=5
log4cplus.appender.R.layout=log4cplus::PatternLayout
log4cplus.appender.R.layout.ConversionPattern=%D{%Y-%m-%d %H:%M:%S} %-6t [%p]%m%n


#logger
#各个logger可以通过setLogLevel设置自己的优先级，当某个logger的LogLevel设置成NOT_SET_LOG_LEVEL时，该logger会继承父logger的优先级。
#另外，如果定义了重名的多个logger, 对其中任何一个的修改都会同时改变其它logger。

#(1)"%%"，转义为%, 即，std::string pattern = "%%" 时输出: "%"
#(2)"%c"，输出logger名称，比如std::string pattern ="%c" 时输出: "test_logger.subtest"，
#     也可以控制logger名称的显示层次，比如"%c{1}"时输出"test_logger"，其中数字表示层次。
#(3)"%D"，显示本地时间，当std::string pattern ="%D" 时输出:"2004-10-16 18:55:45"，%d显示标准时间，
#     所以当std::string pattern ="%d" 时输出 "2004-10-16 10:55:45" （因为我们是东8区，差8个小时啊）。
#     可以通过%d{...}定义更详细的显示格式，比如%d{%H:%M:%s}表示要显示小时:分钟：秒。大括号中可显示的
#     预定义标识符如下：
     
#%a -- 表示礼拜几，英文缩写形式，比如"Fri"
#%A -- 表示礼拜几，比如"Friday"
#%b -- 表示几月份，英文缩写形式，比如"Oct"
#%B -- 表示几月份，"October"
#%c -- 标准的日期＋时间格式，如 "Sat Oct 16 18:56:19 2004"
#%d -- 表示今天是这个月的几号(1-31)"16"
#%H -- 表示当前时刻是几时(0-23)，如 "18"
#%I -- 表示当前时刻是几时(1-12)，如 "6"
#%j -- 表示今天是哪一天(1-366)，如 "290"
#%m -- 表示本月是哪一月(1-12)，如 "10"
#%M -- 表示当前时刻是哪一分钟(0-59)，如 "59"
#%p -- 表示现在是上午还是下午， AM or PM
#%q -- 表示当前时刻中毫秒部分(0-999)，如 "237"
#%Q -- 表示当前时刻中带小数的毫秒部分(0-999.999)，如 "430.732"
#%S -- 表示当前时刻的多少秒(0-59)，如 "32"
#%U -- 表示本周是今年的第几个礼拜，以周日为第一天开始计算(0-53)，如 "41"
#%w -- 表示礼拜几，(0-6, 礼拜天为0)，如 "6"
#%W -- 表示本周是今年的第几个礼拜，以周一为第一天开始计算(0-53)，如 "41"
#%x -- 标准的日期格式，如 "10/16/04"
#%X -- 标准的时间格式，如 "19:02:34"
#%y -- 两位数的年份(0-99)，如 "04"
#%Y -- 四位数的年份，如 "2004"
#%Z -- 时区名，比如 "GMT"

#(4)"%F"，输出当前记录器所在的文件名称，比如std::string pattern ="%F" 时输出: "main.cpp"
#(5)"%L"，输出当前记录器所在的文件行号，比如std::string pattern ="%L" 时输出: "51"
#(6)"%l"，输出当前记录器所在的文件名称和行号，比如std::string pattern ="%L" 时输出:
#     "main.cpp:51"
#(7)"%m"，输出原始信息，比如std::string pattern ="%m" 时输出: "teststr"，即上述代码中
#     LOG4CPLUS_DEBUG的第二个参数，这种实现机制可以确保原始信息被嵌入到带格式的信息中。
#(8)"%n"，换行符，没什么好解释的
#(9)"%p"，输出LogLevel，比如std::string pattern ="%p" 时输出: "DEBUG"
#(10)"%t"，输出记录器所在的线程ID，比如std::string pattern ="%t" 时输出: "1075298944"
#(11)"%x"，嵌套诊断上下文NDC (nested diagnostic context) 输出，从堆栈中弹出上下文信息，NDC可以用对
#      不同源的log信息（同时地）交叉输出进行区分，关于NDC方面的详细介绍会在下文中提到。
#(12)格式对齐，比如std::string pattern ="%-10m"时表示左对齐，宽度是10，此时会输出"teststr  "，当
#      然其它的控制字符也可以相同的方式来使用，比如"%-12d"，"%-5p"等等（刚接触log4cplus文档时还以为
#      "%-5p"整个字符串代表LogLevel呢，呵呵）。

#appender输出: 
#	ConsoleAppender

#   FileAppender
##		filename:  文件名
##		mode: 文件类型，可选择的文件类型包括app、ate、binary、in、out、trunc，缺省是trunc，表示将先前文件删除。
##		immediateFlush  : 缓冲刷新标志

#	RollingFileAppender
##		filename        : 文件名
##		maxFileSize     : 文件的最大尺寸
##		maxBackupIndex  : 最大记录文件数
##		mmediateFlush   : 缓冲刷新标志

#	DailyRollingFileAppender
##		filename        : 文件名
##		schedule        : 存储频度, MONTHLY（每月）、WEEKLY（每周）、DAILY（每日）、TWICE_DAILY（每两天）、HOURLY（每时）、MINUTELY（每分）
##		immediateFlush  : 缓冲刷新标志
##		maxBackupIndex : 最大记录文件数

#	SocketAppender


#layout格式
#	SimpleLayout: 是一种简单格式的布局器，在输出的原始信息之前加上LogLevel和一个"-"。 
#	TTCCLayout:	  其格式由时间，线程ID，Logger和NDC 组成。 
#	PatternLayout:是一种有词法分析功能的模式布局器,类似正则表达式。


#filter
#目前log4plus提供的过滤器包括DenyAllFilter 、LogLevelMatchFilter、LogLevelRangeFilter、和StringMatchFilter。
#	LogLevelMatchFilter根据特定的日志级别进行过滤。
##		过滤条件包括LogLevelToMatch和AcceptOnMatch（true|false）， 只有当日志的LogLevel值与LogLevelToMatch相同，且AcceptOnMatch为true时才会匹配。
#	LogLevelRangeFilter根据根据日志级别的范围进行过滤。
##		过滤条件包括LogLevelMin、LogLevelMax和AcceptOnMatch，只有当日志的LogLevel在LogLevelMin、LogLevelMax之间同时AcceptOnMatch为true时才会匹配。
#	StringMatchFilter根据日志内容是否包含特定字符串进行过滤。
##		过滤条件包括StringToMatch和AcceptOnMatch，只有当日志包含StringToMatch字符串 且AcceptOnMatch为true时会匹配。
#	DenyAllFilter则过滤掉所有消息。
